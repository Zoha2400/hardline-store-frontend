import axios from "axios";

const axiosInstance = axios.create({
  baseURL: "http://localhost:8000",
  timeout: 10000,
  withCredentials: true,
});

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const config = error.config;

    if (!config.__isRetryRequest) {
      config.__isRetryRequest = true;
      try {
        console.warn("–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:", error.message);
        return axiosInstance(config);
      } catch (retryError: any) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", retryError.message);
        return Promise.reject(retryError);
      }
    }

    return Promise.reject(error);
  },
);

axiosInstance.interceptors.request.use(
  (config) => {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ ${config.url}`);
    return config;
  },
  (error) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
    return Promise.reject(error);
  },
);

axiosInstance.interceptors.response.use(
  (response) => {
    console.log(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å ${response.config.url}:`, response.data);
    return response;
  },
  (error) => {
    console.error(
      `–û—à–∏–±–∫–∞ —Å ${error.config?.url || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL"}:`,
      error.message,
    );
    return Promise.reject(error);
  },
);

export default axiosInstance;
